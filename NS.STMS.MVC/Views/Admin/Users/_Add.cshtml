@model NS.STMS.MVC.Models.Admin.Users.AddUserViewModel

@await Component.InvokeAsync("PageHeader", new { model = Model.PageHeader })

<div class="row col-12">

	<style>
		.section-title {
			color: #343a40;
			text-transform: capitalize;
			font-family: sans-serif;
			font-size: 16px;
		}

		.section-div {
			margin-top: 20px;
		}
	</style>

	<div class="row col-12 section-div">

		<div class="col-12">
			<h1 class="section-title">@Messages.Personal_Information</h1>
			<hr />
		</div>

		@await Component.InvokeAsync("InputDiv", new
		{
		id = "NameInput",
		key = @Messages.Name,
		maxLength = 100
		})

		@await Component.InvokeAsync("InputDiv", new
		{
		id = "SurnameInput",
		key = @Messages.Surname,
		maxLength = 100
		})

		@await Component.InvokeAsync("InputDiv", new
		{
		id = "EmailInput",
		key = @Messages.Email,
		maxLength = 100
		})

		@await Component.InvokeAsync("DateInputDiv", new
		{
		id = "DateOfBirthInput",
		key = @Messages.Date_of_Birth
		})

		@await Component.InvokeAsync("PasswordInputDiv", new
		{
		reenter = true
		})

	</div>

	<div class="row col-12 section-div">

		<div class="col-12">
			<h1 class="section-title">@Messages.Eduction_Information</h1>
			<hr />
		</div>

		@await Component.InvokeAsync("InputDropDownDiv", new
		{
		id = "GradeInput",
		key = @Messages.Grade,
		options = Model.Grades
		})

		@await Component.InvokeAsync("InputDiv", new
		{
		id = "SchoolInput",
		key = @Messages.School,
		maxLength = 100
		})

	</div>

	<div class="row col-12 section-div">

		<div class="col-12">
			<h1 class="section-title">@Messages.Address_Information</h1>
			<hr />
		</div>

		@await Component.InvokeAsync("CountryCityCountyDiv")

	</div>

	@await Component.InvokeAsync("ProcessInputDiv", new
	{
	id = "CreateInput",
	text = @Messages.Create,
	btnClass = "btn-success",
	onClick = "createUser()"
	})

</div>

<script>

	function isValidForm() {

		var validationModels = [
			{ inputId: "NameInput", defaultCondition: true },
			{ inputId: "SurnameInput", defaultCondition: true },
			{ inputId: "EmailInput", defaultCondition: true },
			{ inputId: "DateOfBirthInput", defaultCondition: true },

			{ inputId: "GradeInput", defaultCondition: false },
			{ inputId: "SchoolInput", defaultCondition: true },
			{ inputId: "CountryInput", defaultCondition: false },
			{ inputId: "CityInput", defaultCondition: false },
			{ inputId: "CountyInput", defaultCondition: false }
		];

		var controlValue = inputRequiredValidation(validationModels);

		return controlValue;
	}

	function createUser() {

		var isValidCreate = isValidForm() & isPasswordValid();

		if (!isValidCreate) {
			throw "validation failed";
		}

		var name = getInputVal('NameInput');
		var surname = getInputVal('SurnameInput');
		var email = getInputVal('EmailInput');
		var password = getInputVal('PasswordInput');
		var reenterPassword = getInputVal('ReenterPasswordInput');
		var dateOfBirth = getInputVal('DateOfBirthInput');

		var grade = getInputVal('GradeInput');
		var school = getInputVal('SchoolInput');
		var country = getInputVal('CountryInput');
		var city = getInputVal('CityInput');
		var county = getInputVal('CountyInput');

		var data = {
			Name: name,
			Surname: surname,
			Email: email,
			Password: password,
			ReenterPassword: reenterPassword,
			DateOfBirth: dateOfBirth,
			Grade: grade,
			School: school,
			County: county
		};

		var url = '/Admin/Users/Add';
		postJSonToController(url, data, createUserOnSuccess);

	}

	function createUserOnSuccess(resp) {

		stopLoading();

		switch (resp.Type) {

			case "E":
				toastrError(resp.Message);
				break;
			case "S":
				toastrSuccess();
				break;
			default:
				toastrError(anErrorOccurredMessage);
				break;
		}
	}

</script>